// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/auth/v1/auth.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthManagement_Regiester_FullMethodName  = "/auth.v1.AuthManagement/Regiester"
	AuthManagement_GetSession_FullMethodName = "/auth.v1.AuthManagement/GetSession"
)

// AuthManagementClient is the client API for AuthManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthManagementClient interface {
	// Register try to register an account on the auth server.
	Regiester(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// GetSession requests the auth session from the auth server.
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
}

type authManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthManagementClient(cc grpc.ClientConnInterface) AuthManagementClient {
	return &authManagementClient{cc}
}

func (c *authManagementClient) Regiester(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AuthManagement_Regiester_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagementClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, AuthManagement_GetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthManagementServer is the server API for AuthManagement service.
// All implementations must embed UnimplementedAuthManagementServer
// for forward compatibility
type AuthManagementServer interface {
	// Register try to register an account on the auth server.
	Regiester(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// GetSession requests the auth session from the auth server.
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	mustEmbedUnimplementedAuthManagementServer()
}

// UnimplementedAuthManagementServer must be embedded to have forward compatible implementations.
type UnimplementedAuthManagementServer struct {
}

func (UnimplementedAuthManagementServer) Regiester(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regiester not implemented")
}
func (UnimplementedAuthManagementServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedAuthManagementServer) mustEmbedUnimplementedAuthManagementServer() {}

// UnsafeAuthManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthManagementServer will
// result in compilation errors.
type UnsafeAuthManagementServer interface {
	mustEmbedUnimplementedAuthManagementServer()
}

func RegisterAuthManagementServer(s grpc.ServiceRegistrar, srv AuthManagementServer) {
	s.RegisterService(&AuthManagement_ServiceDesc, srv)
}

func _AuthManagement_Regiester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagementServer).Regiester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagement_Regiester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagementServer).Regiester(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManagement_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagementServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthManagement_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagementServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthManagement_ServiceDesc is the grpc.ServiceDesc for AuthManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.v1.AuthManagement",
	HandlerType: (*AuthManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Regiester",
			Handler:    _AuthManagement_Regiester_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _AuthManagement_GetSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/v1/auth.proto",
}
